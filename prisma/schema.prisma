// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// generator client {
//   provider = "prisma-client-js"
//   previewFeatures = ["fullTextSearch", "fullTextIndex"]
// }

// datasource db {
//   provider = "postgresql"
//   url   = env("DATABASE_URL")
//   relationMode = "prisma"
// }

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  notes         Note[]
  credits               Int                    @default(10)

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token   String   @unique
  expires DateTime

  @@unique([userId])
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean @default(false)

  chapters Chapter[]

  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attachments Attachment[]
  purchases   Purchase[]
  units       Unit[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  // @@fulltext([title])

  @@index([categoryId])
}

model Unit {
  id       String @id @default(cuid())
  courseId String
  position Int

  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id                 String     @id @default(uuid())
  title              String
  description        String?
  videoUrl           String?
  position           Int?
  isPublished        Boolean    @default(false)
  isFree             Boolean    @default(false)
  youtubeSearchQuery String?
  videoId            String?
  summary            String?
  unitId             String?
  unit               Unit?      @relation(fields: [unitId], references: [id])
  questions          Question[]
  notes              Note[]

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id        String @id @default(cuid())
  chapterId String

  question String
  answer   String
  options  String
  chapter  Chapter @relation(fields: [chapterId], references: [id])
}

model Note {
  id        String  @id @default(cuid())
  content   String
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isDefault Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id        String @id @default(uuid())
  userId    String
  chapterId String

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isCompleted Boolean @default(false)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
