// utils/localbase.ts

import { User, Course, Unit, Chapter, Progress } from "@/app/@types/models";
import db from "./db";

export function addData<T>(collectionName: string, data: T): Promise<void> {
  return db.collection(collectionName).add(data);
}

// Example usage
// addData<User>("users", {
//   email: "john.doe@example.com",
//   name: "John Doe",
//   password: "securepassword",
// })
//   .then(() => console.log("User added successfully"))
//   .catch((error) => console.error("Error adding user:", error));

// Add data to a collection
export function addData<T>(collectionName: string, data: T): Promise<void> {
    return db.collection(collectionName).add(data);
  }
  
  // Get all data from a collection
  export function getData<T>(collectionName: string): Promise<T[]> {
    return db.collection(collectionName).get();
  }
  
  // Get data by ID from a collection
  export function getDataById<T>(collectionName: string, id: string): Promise<T | undefined> {
    return db.collection(collectionName).doc({ id }).get();
  }
  
  // Update data in a collection
  export function updateData<T>(collectionName: string, id: string, data: Partial<T>): Promise<void> {
    return db.collection(collectionName).doc({ id }).update(data);
  }
  
  // Delete data from a collection
  export function deleteData(collectionName: string, id: string): Promise<void> {
    return db.collection(collectionName).doc({ id }).delete();
  }
  

export function getData<T>(collectionName: string): Promise<T[]> {
    return db.collection(collectionName).get();
  }
  
  // Example usage
//   getData<User>('users').then(users => console.log('Users:', users))
//     .catch(error => console.error('Error getting users:', error));



// Create a new profile and link it to a user
async function createProfile(userId: string, bio: string, avatarUrl: string) {
    const profile: Profile = { userId, bio, avatarUrl };
    await db.collection('profiles').add(profile);
  }
  
  // Get user with profile
  async function getUserWithProfile(userId: string) {
    const user = await db.collection('users').doc({ id: userId }).get();
    const profile = await db.collection('profiles').doc({ userId }).get();
    return { ...user, profile };
  }
//   one to many
// One-to-many relationship example: Course to Units

// Create a new unit and link it to a course
async function createUnit(courseId: string, title: string, content: string) {
    const unit: Unit = { courseId, title, content };
    await db.collection('units').add(unit);
  }
  
  // Get course with units
  async function getCourseWithUnits(courseId: string) {
    const course = await db.collection('courses').doc({ id: courseId }).get();
    const units = await db.collection('units').get({ filter: { courseId } });
    return { ...course, units };
  }

  // Many-to-many relationship example: User to Courses via CourseEnrollment

// Enroll a user in a course
async function enrollUserInCourse(userId: string, courseId: string) {
    const enrollment: CourseEnrollment = { userId, courseId };
    await db.collection('courseEnrollments').add(enrollment);
  }
  
  // Get user with courses
  async function getUserWithCourses(userId: string) {
    const user = await db.collection('users').doc({ id: userId }).get();
    const enrollments = await db.collection('courseEnrollments').get({ filter: { userId } });
    const courseIds = enrollments.map(e => e.courseId);
    const courses = await db.collection('courses').get({ filter: course => courseIds.includes(course.id) });
    return { ...user, courses };
  }
  
  // Get course with users
  async function getCourseWithUsers(courseId: string) {
    const course = await db.collection('courses').doc({ id: courseId }).get();
    const enrollments = await db.collection('courseEnrollments').get({ filter: { courseId } });
    const userIds = enrollments.map(e => e.userId);
    const users = await db.collection('users').get({ filter: user => userIds.includes(user.id) });
    return { ...course, users };
  }
  